
[{"content":"","date":"5 May 1010","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":"数据集：D4RL\n参考项目：Corl\n1 D4RL数据集 #\r参考博客：\n【代码】D4RL安装全流程 - JasonZhu\u0026rsquo;s Blog (jasonzhujp.github.io)\n离线强化学习(Offline RL)系列2: (环境篇)D4RL数据集简介、安装及错误解决 - 知乎 (zhihu.com)\n1.1 conda环境 #\r新建conda环境：\n血泪教训：由于后续安装corl时总是出现版本问题，所以这里应该至少是3.8的python版本\n# 在终端当前路径下新建环境 conda create -n 环境名 python=3.8 # 在指定路径下新建环境 conda create --prefix=\u0026#34;路径名\\环境名\u0026#34; python=3.8 1.2 安装mujoco210 #\r在Mujoco的\rGithub仓库中下载mujoco210-linux-x86_64.tar.gz，然后重命名、解压如下：\ncd ~/Downloads # 进入压缩包所在目录 mv mujoco210-linux-x86_64.tar.gz mujoco210 # 重命名 tar -zxvf mujoco210-linux-x86_64.tar.gz # 解压 mkdir ~/.mujoco # 新建文件夹 cp -r mujoco210 ~/.mujoco # 将解压后的文件复制过去 添加环境变量如下：\nsudo gedit ~/.bashrc # 打开设置文件 export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/.mujoco/mujoco210/bin export MUJOCO_KEY_PATH=~/.mujoco${MUJOCO_KEY_PATH} source ~/.bashrc # 执行更新 测试是否安装正确，弹出mujoco GUI，初始化了一个木偶人：\ncd ~/.mujoco/mujoco210/bin/ ./simulate ../model/humanoid.xml 以防万一：\n到\r旧版本下载地址\n点击activation key，申请mjkey.txt文件，\n把文件复制到mujoco210的bin文件夹下和mujoco文件夹下\n1.3 安装mujoco_py库 #\r（1）全局安装gcc-7\n# 更新包索引或包列表(并非upgrade会直接升级包到最新版本) sudo apt update # 安装gcc sudo apt install gcc-7 默认的gcc9版本过高会导致不兼容，对于已经默认更高版本的情况，使用指令添加gcc7为可选版本：\nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 7 选择gcc7的版本，输入该指令并按下数字“7”并回车\nsudo update-alternatives --config gcc （2）预安装系统包\n另外，根据openai的github介绍：在Ubuntu上安装mujoco-py需要安装以下库：\nsudo apt install libosmesa6-dev libgl1-mesa-glx libglfw3 （3）初步安装mujoco_py\n接着，在conda环境下安装mujoco_py包：\npip install mujoco_py python # 进入python环境 import mujoco_py # 大概率会报错 # 或者输入一键指令进行验证，没有报错代表安装成功，否则进行错误排查 echo “import mujoco_py” | python （4）报错排查（如果上一步发生报错，否则跳过）\n首先回顾前面的内容，应当确保gcc安装完成并满足要求。\n现在若报错如下，说明需要额外安装包： fatal error: GL/osmesa.h 需安装：\nsudo apt install libosmesa6-dev sudo apt install libgl1-mesa-glx libosmesa6 fatal error: GL/glew.h: No such file or directory 需安装：\nsudo apt install libglew-dev glew-utils FileNotFoundError: [Errno 2] No such file or directory: \u0026lsquo;patchelf\u0026rsquo;: \u0026lsquo;patchelf\u0026rsquo; 需安装：\nsudo apt -y install patchelf 关于路径报错： Missing path to your environment variable. Current values LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/用户名/.mujoco/mujoco210/bin Please add following line to .bashrc: export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/nvidia 此处要求同时具备两条环境变量，其解决办法为：\niii. 在命令行中可以用上述方式解决，但是在pycharm中不可以，因为pycharm是独立的运行空间，无法读取用户环境变量。\\\n因此，在pycharm中，最简单的是手动添加变量，在Run - Edit Configurations - Environment variables中添加变量：\n$LD_LIBRARY_PATH:/home/hypnos/.mujoco/mujoco210/bin:$LD_LIBRARY_PATH:/usr/lib/nvidia 关于Error compling Cython file:… 报错： pip install cython 有些博客会指明cython的版本，我这里自动安装才不会出现进一步相关报错\n1.4 安装dm_control #\r在conda环境下执行：\npip install dm_control 1.5 安装d4rl数据集 #\r（1）克隆仓库\n进入自定义目录下，执行clone命令：\ngit clone https://github.com/rail-berkeley/d4rl.git （2）修改文件\n编辑d4rl目录下的setup.py文件，注释掉install_requires下的mujoco_py和dm_control，因为前面我们已经自行安装完毕了。\n（3）安装依赖\npip install -e . （4）运行示例程序：\nimport gym import d4rl env = gym.make(\u0026#39;maze2d-umaze-v1\u0026#39;) env.reset() res = env.step(env.action_space.sample()) print(res) dataset = env.get_dataset() print(dataset[\u0026#39;observations\u0026#39;]) 以下是预计输出\n(array([ 2.9686984 , 0.91059711, 0.01391173, -0.3282065 ]), 0.0, False, {}) Downloading dataset: http://rail.eecs.berkeley.edu/datasets/offline_rl/maze2d/maze2d-umaze-sparse-v1.hdf5 to /home/jason/.d4rl/datasets/maze2d-umaze-sparse-v1.hdf5 load datafile: 100%|██████████| 8/8 [00:00\u0026lt;00:00, 28.63it/s] [[ 1.0856489 1.9745734 0.00981035 0.02174424] [ 1.0843927 1.97413 -0.12562364 -0.04433781] [ 1.0807577 1.9752754 -0.3634883 0.11453988] ... [ 1.1328583 2.8062387 -4.484303 0.09555068] [ 1.0883482 2.8068895 -4.4510083 0.06509537] [ 1.0463258 2.8074222 -4.202244 0.05324839]] 对于会出现的报错no module ‘six’, ‘flow’, ‘carla’等，网友建议是直接无视。\nimport d4rl No module named \u0026lsquo;flow\u0026rsquo; and \u0026lsquo;carla\u0026rsquo; · Issue #214 · Farama-Foundation/D4RL (github.com)\n（5）进行环境备份，十分重要！以防万一！如： conda create \u0026ndash;name 备份环境名 \u0026ndash;clone 原环境名\n2. 安装CleanOfflineRL库 #\rGithub主页：\rtinkoff-ai/CORL (github.com)\n（1）首先进行环境备份，避免出问题：\nconda create --name 备份环境名 --clone 原环境名 （2）克隆仓库：\n在自定义文件路径下输入指令：\ngit clone https://github.com/tinkoff-ai/CORL.git （3）修改配置文件：\n打开requirement文件夹，以防万一，对两个requirement文件均进行同步修改：\n注释掉d4rl这一行，因为我们自己已经安装好了\n在命令行中输入pip list，检查已经安装好的依赖和requirement文件中要求的同名依赖的版本的区别，重点关注gym、torch、mujoco-py的版本，这些内容是我们已经安装好的，所以尽量避免版本冲突，如果有冲突就注释掉。（我安装各个依赖都很谨慎，所以在这里并没有发生冲突）\n（4）安装依赖：\n再次确认已经完成备份，避免出问题\n后面的步骤我先后在已经安装好d4rl和torch的python3.7和python3.8的conda环境中各执行了一次，由于corl中诸多依赖都需要“python\u0026gt;=3.8”的环境，所以第一次安装bug重重，第二次安装则十分顺利。\n安装指令：\npip install -r requirements/requirements_dev.txt 大功告成，累死个人。\n","date":"5 May 1010","externalUrl":null,"permalink":"/posts/2024/offlinerl%E9%85%8D%E7%BD%AE_d4rl-corl/","section":"Posts","summary":"数据集：D4RL","title":"【OfflineRL】环境配置：D4RL+CORL","type":"posts"},{"content":"","date":"5 May 1010","externalUrl":null,"permalink":"/tags/offlinerl/","section":"Tags","summary":"","title":"Offlinerl","type":"tags"},{"content":"","date":"5 May 1010","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"5 May 1010","externalUrl":null,"permalink":"/tags/resume/","section":"Tags","summary":"","title":"Resume","type":"tags"},{"content":"","date":"5 May 1010","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"您好！我目前是一名在读研究生，就读于南方科技大学，电子信息专业。\n主要研究方向是机器人灵巧手，深度强化学习和模仿学习。\n主要工作包括搭建灵巧手硬件平台、设计DRL+IL算法等。\n教育背景 #\r南方科技大学 电子信息 硕士 2021-至今\n汕头大学 电子信息工程 本科 2016-2020\n主要研究课题 #\r状态引导的机器人抓取和操作任务的模仿学习 探索如何在不需要完备专家演示的情况下，仅通过部分的专家状态轨迹数据，结合强化学习方法，有效地指导机器人学习完成相应任务的策略\n机器人灵巧手硬件系统搭建 设计一种低成本、高自由度的机器人灵巧手 设计一种低成本、用于对机器人灵巧手进行遥操作的控制手套\n个人能力 #\r1、熟悉Python，pytorch训练框架\n2、熟悉mujoco、了解IsaacGym仿真环境\n3、熟悉Fusion360三维建模\n4、英语六级\n实习经历 #\r中山大学微电子学院 科研助理 2020-2021 ","date":"5 May 1010","externalUrl":null,"permalink":"/resume/","section":"","summary":"您好！我目前是一名在读研究生，就读于南方科技大学，电子信息专业。","title":"个人简历","type":"page"},{"content":"搭建个人网站\n参考教程：\rHugo官网入门教程\n本地调试 #\r调试指令：\n# 项目路径运行 hugo server --theme=blowfish --buildDrafts 调试时可以在本地打开调试页面：http://127.0.0.1:1313\n仓库同步 #\r调试完成的文件会自动更新到public文件夹中，因此在public文件夹中进行git上传：\ncd public git add . git commit -m \u0026#34;commit\u0026#34; git push origin main 手动部署 #\r自动部署还没弄明白，所以在这里进行手动部署\n1、在github.io项目中进入“Actions”中\n2、在workflows中选择“Deploy static content to Pages”\n3、“Run workflow”\n","date":"4 May 30300","externalUrl":null,"permalink":"/posts/first/","section":"Posts","summary":"搭建个人网站","title":"Build \u0026 Deploy","type":"posts"},{"content":"​ 在这里编辑正文内容\n","date":"12 May 202026","externalUrl":null,"permalink":"/about/","section":"","summary":"​ 在这里编辑正文内容","title":"about","type":"page"},{"content":"","date":"1 May 1010","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"1 May 1010","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"1 May 1010","externalUrl":null,"permalink":"/none/","section":"None","summary":"","title":"None","type":"none"},{"content":"","date":"1 May 1010","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]